/*
Calendar Actions
*/

enum eventDetail {
    'Start Date',
    'End Date',
    'Is All Day',
    'Calendar',
    'Location',
    'Has Alarms',
    'Duration',
    'Is Canceled',
    'My Status',
    'Organizer',
    'Organizer Is Me',
    'Attendees',
    'Number of Attendees',
    'URL',
    'Title',
    'Notes',
    'Attachments',
    'File Size',
    'File Extension',
    'Creation Date',
    'File Path',
    'Last Modified Date',
    'Name',
}

enum editEventDetail {
    'Start Date',
    'End Date',
    'Is All Day',
    'Location',
    'Duration',
    'My Status',
    'Attendees',
    'URL',
    'Title',
    'Notes',
    'Attachments',
}

// [Doc]: [Calendars] Add Calendar: Create a calendar with `name`.
action 'addnewcalendar' addCalendar(text name: 'CalendarName')

// [Doc]: [Calendars] Open Event in Calendar: Show `event` in the calendar app.
action showInCalendar(variable event: 'WFEvent')

// [Doc]: [Calendars] Edit Event: Edit a detail of an event. Provide an event, a detail to modify, and a new value for that detail.
action 'setters.calendarevents' editEvent(variable event: 'WFInput', editEventDetail detail: 'WFContentItemPropertyName', text newValue: 'WFCalendarEventContentItemStartDate')

// [Doc]: [Calendars] Get Event Detail: Get a detail of an event.
action 'properties.calendarevents' getEventDetail(variable event: 'WFInput', eventDetail detail: 'WFContentItemPropertyName')

// [Doc]: [Calendars] Remove Events: Remove an event.
action removeEvents(variable events: 'WFInputEvents', bool ?includeFutureEvents: 'WFCalendarIncludeFutureEvents' = false)

// [Doc]: [Reminders] Open Reminders List
action 'showlist' openRemindersList(variable list: 'WFList')

// [Doc]: [Reminders] Add Quick Reminder
action 'is.workflow.actions.addquickreminder' addQuickReminder()

// [Doc]: [Reminders] Remove Reminders
action removeReminders(variable reminders: 'WFInputReminders')

// [Doc]: [Alarms] Get Alarms: Returns all of the alarms on the device.
action 'com.apple.mobiletimer-framework.MobileTimerIntents.MTGetAlarmsIntent' getAlarms()

// [Doc]: [Dates] Get Dates: Get dates from input.
action 'detect.date' getDates(variable input: 'WFInput'): array

// [Doc]: [Dates] Date: Create a date value from `date`. Example: October 5, 2022.
action date(text date: 'WFDateActionDate') {
	"WFDateActionMode": "Specified Date"
}

enum holidayYear {
    '2023',
    '2024',
    '2025',
    '2026',
    '2027',
}

enum eventOccurrenceMode {
    'Next Occurrence',
    'Specified Year',
}

enum holiday {
    'April Fools\' Day',
    'Ash Wednesday',
    'Christmas Day',
    'Christmas Eve',
    'Cinco de Mayo',
    'Columbus Day',
    'Day of the Dead',
    'Daylight Saving Time',
    'Daylight Saving Time End',
    'Diwali',
    'Earth Day',
    'Easter Sunday',
    'Eid al-Adha',
    'Eid al-Fitr',
    'Election Day',
    'Father\'s Day',
    'First Night of Ramadan',
    'Flag Day',
    'Good Friday',
    'Groundhog Day',
    'Halloween',
    'Holi',
    'Inauguration Day',
    'Independence Day',
    'Indigenous Peoples\' Day',
    'Juneteenth',
    'Martin Luther King Jr. Day',
    'Memorial Day',
    'Mother\'s Day',
    'New Year\'s Day',
    'New Year\'s Eve',
    'Palm Sunday',
    'Presidents\' Day',
    'St. Patrick\'s Day',
    'Tax Day',
    'Thanksgiving',
    'Valentine\'s Day',
    'Veterans Day',
    'Workers\' Day',
}

// [Doc]: [Dates] Get Holiday Date: Get the date of a holiday, optionally specifically for a few past or future years.
action 'date' getHolidayDate(holiday holiday: 'WFDateActionMode', eventOccurrenceMode ?occurrenceMode: 'WFEventOccurrenceMode' = "Next Occurrence", holidayYear ?forYear: 'WFEventOccurrenceSpecifiedYear'): text

// [Doc]: [Dates] Current Date: Get the current date.
action default 'date' currentDate() {
    "WFDateActionMode": "Current Date"
}

enum dateFormats {
	'None',
	'Short',
	'Medium',
	'Long',
	'Relative',
	'RFC 2822',
	'ISO 8601',
	'Custom',
}

enum timeFormats {
	'None',
	'Short',
	'Medium',
	'Long',
	'Relative',
}

// [Doc]: [Formatting] Format Date: Format a date using a standard or custom format.
action default 'format.date' formatDate(variable date: 'WFDate', dateFormats ?dateFormat: 'WFDateFormatStyle' = "Short", text ?customDateFormat: 'WFDateFormat') {
	"WFTimeFormatStyle": "None"
}

// [Doc]: [Formatting] Format Time: Format a time using a standard or custom format.
action 'format.date' formatTime(variable time: 'WFDate', timeFormats ?timeFormat: 'WFTimeFormatStyle' = "Short") {
	"WFDateFormatStyle": "None"
}

// [Doc]: [Formatting] Format Timestamp: Format a timestamp using standard formats and/or a custom date format.
action 'format.date' formatTimestamp(
    variable date: 'WFDate',
    dateFormats ?dateFormat: 'WFDateFormatStyle' = "Short",
    timeFormats ?timeFormat: 'WFTimeFormatStyle' = "Short",
    text ?customDateFormat: 'WFDateFormat'
)
