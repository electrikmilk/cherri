/*
Basic Actions and Global Types
*/

enum abcSortOrder {
 'A to Z',
 'Z to A',
}

enum language {
	'ar_AE',
	'zh_CN',
	'zh_TW',
	'nl_NL',
	'en_GB',
	'en_US',
	'fr_FR',
	'de_DE',
	'id_ID',
	'it_IT',
	'jp_JP',
	'ko_KR',
	'pl_PL',
	'pt_BR',
	'ru_RU',
	'es_ES',
	'th_TH',
	'tr_TR',
	'vn_VN',
}

// [Doc]: Stop Shortcut: Stops the shortcut.
action 'exit' stop()

// [Doc]: Nothing: Clear the current output.
action nothing()

// [Doc]: Comment: Add an explicit comment.
action comment(rawtext text: 'WFCommentActionText')

// [Doc]: Get Type: Get the type of input.
action 'getitemtype' typeOf(variable input: 'WFInput'): text

// [Doc]: Get Object of Class: Get the object of `class` from a variable.
action 'getclassaction' getObjectOfClass(text class: 'Class', variable from: 'Input')

// [Doc]: [Output] Show Result: Show `input`.
action 'showresult' show(text input: 'Text')

// [Doc]: [Output] Quick Look: Preview `input` in Quick Look.
action 'previewdocument' quicklook(variable input: 'WFInput')

// [Doc]: [Output] Stop and Output: Stop and output `output`. Do nothing if there is nowhere to output.
action default output(text output: 'WFOutput')

// [Doc]: [Output] Output or Copy to Clipboard: Stop and output `output`. Copy to the clipboard if there is nowhere to output.
action 'output' outputOrClipboard(text output: 'WFOutput') {
	"WFNoOutputSurfaceBehavior": "Copy to Clipboard"
}

// [Doc]: [Output] Must Output: Stop and output `output`. Respond with response if there is nowhere to output.
action 'output' mustOutput(text output: 'WFOutput', text response: 'WFResponse') {
	"WFNoOutputSurfaceBehavior": "Respond"
}

// [Doc]: [Output] Content Graph: Display input as a content graph.
action 'viewresult' contentGraph(variable input: 'WFInput')

enum countType {
	'Items',
	'Characters',
	'Words',
	'Sentences',
	'Lines',
}

// [Doc]: Count: Returns a count of `type` of items in `input`.
action count(variable input: 'Input', countType ?type: 'WFCountType' = "Items"): number

// [Doc]: [Notifications] Alert: Shows an alert with text and optional title and an OK button to proceed.
action alert(text alert: 'WFAlertActionMessage', text ?title: 'WFAlertActionTitle') {
	"WFAlertActionCancelButtonShown": false
}

// [Doc]: [Notifications] Confirm: Shows an alert with text and optional title. It displays an OK button to proceed, and a cancel button that stops the Shortcut.
action default 'alert' confirm(text alert: 'WFAlertActionMessage', text ?title: 'WFAlertActionTitle') {
	"WFAlertActionCancelButtonShown": true
}

// [Doc]: [Notifications] Show Notification: Shows a custom notification message.
action 'notification' showNotification(
    text body: 'WFNotificationActionBody',
    text ?title: 'WFNotificationActionTitle',
    bool ?playSound: 'WFNotificationActionSound' = true,
    variable ?attachment: 'WFInput'
)

// [Doc]: Number: Create a number value.
action number(variable number: 'WFNumberActionNumber'): number

action 'gettext' text(text text: 'WFTextActionText'): text

// [Doc]: [Control Flow] Wait: Wait a specified number of seconds.
action 'delay' wait(number seconds: 'WFDelayTime')

// [Doc]: [Control Flow] Wait to Return: Wait for the user to return to Shortcuts.
action waitToReturn()

// [Doc]: [Search] Search/Spotlight: Get results from search on iOS or iPadOS, and Spotlight on macOS.
action 'spotlightsearch' search(text query: 'WFInputText', number ?limit: 'WFSpotlightSearchLimit' = 5, array ?resultType: 'WFSpotlightSearchResultType' = ["Calendar Events","Contacts","Mail","Messages","Notes","Photos","Reminders","Voice Recordings","Bookmarks"]): array
