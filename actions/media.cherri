/*
Media Actions
*/

/* Stores */

#define action searchAppStore(text query: 'WFSearchTerm')

#define action 'showinstore' showIniTunes(variable product: 'WFProduct')

/* Audio */

enum audioQuality {
	'Normal',
	'Very High',
}

enum audioStart {
	'On Tap',
	'Immediately',
}

enum audioFormats {
	'M4A',
	'AIFF',
}

enum audioSpeeds {
	'0.5X',
	'Normal',
	'2X',
}

#define action recordAudio(audioQuality ?quality: 'WFRecordingCompression' = "Normal", audioStart ?start: 'WFRecordingStart' = "On Tap")

#define action 'encodemedia' encodeAudio(
    variable audio: 'WFMedia',
    audioFormats ?format: 'WFMediaAudioFormat' = "M4A",
    audioSpeeds ?speed: 'WFMediaCustomSpeed' = "Normal"
) {
	"WFMediaAudioOnly": true
}

#define action playSound(variable input: 'WFInput')

/* Shazam */

#define action 'shazamMedia' startShazam(bool ?show: 'WFShazamMediaActionShowWhenRun' = true, bool ?showError: 'WFShazamMediaActionErrorIfNotRecognized' = true)

enum shazamDetail {
	'Apple Music ID',
	'Artist',
	'Title',
	'Is Explicit',
	'Lyrics Snippet',
	'Lyric Snippet Synced',
	'Artwork',
	'Video URL',
	'Shazam URL',
	'Apple Music URL',
	'Name',
}

#define action 'properties.shazam' getShazamDetail(variable input: 'WFInput', shazamDetail detail: 'WFContentItemPropertyName')

/* Camera */

#define action takePhoto(number count: 'WFPhotoCount' = 1, bool showPreview: 'WFCameraCaptureShowPreview' = true)

enum cameraOrientation {
	'Front',
	'Back',
}

enum videoQuality {
	'Low',
	'Medium',
	'High',
}

enum recordingStart {
	'On Tap',
	'Immediately',
}

#define action takeVideo(
    cameraOrientation ?camera: 'WFCameraCaptureDevice' = "Front",
    videoQuality ?quality: 'WFCameraCaptureQuality' = "High",
    recordingStart ?recordingStart: 'WFRecordingStart' = "Immediately"
)

/* Screenshots */

#define action takeScreenshot(bool ?mainMonitorOnly: 'WFTakeScreenshotMainMonitorOnly' = false) {
	"WFTakeScreenshotScreenshotType": "Full Screen"
}

/* GIFs */

#define action makeGIF(variable input: 'WFInput', text ?delay: 'WFMakeGIFActionDelayTime' = "0.3", number ?loops: 'WFMakeGIFActionLoopCount', text ?width: 'WFMakeGIFActionManualSizeWidth', text ?height: 'WFMakeGIFActionManualSizeHeight') {
	"WFMakeGIFActionAutoSize": true,
	"WFMakeGIFActionLoopEnabled": true
}

#define action 'addframetogif' addToGIF(text image: 'WFImage', text gif: 'WFInputGIF', text ?delay: 'WFGIFDelayTime' = "0.25", bool ?autoSize: 'WFGIFAutoSize' = true, text ?width: 'WFGIFManualSizeWidth', text ?height: 'WFGIFManualSizeHeight')

#define action makeVideoFromGIF(variable gif: 'WFInputGIF', number ?loops: 'WFMakeVideoFromGIFActionLoopCount' = 1)

#define action 'getframesfromimage' getImageFrames(variable image: 'WFImage')

/* Image Editing */

enum imageCombineMode {
    'Vertically',
    'In a Grid'
}

#define action combineImages(variable images: 'WFInput', imageCombineMode ?mode: 'WFImageCombineMode' = "Vertically", number ?spacing: 'WFImageCombineSpacing' = 1)

enum cropImagePosition {
	'Center',
	'Top Left',
	'Top Right',
	'Bottom Left',
	'Bottom Right',
	'Custom',
}

#define action 'image.crop' cropImage(variable image: 'WFInput', text ?width: 'WFImageCropWidth' = "100", text ?height: 'WFImageCropHeight' = "100", cropImagePosition ?position: 'WFImageCropPosition' = "Center", text ?customPositionX: 'WFImageCropX', text ?customPositionY: 'WFImageCropY')

enum flipImageDirection {
	'Horizontal',
	'Vertical',
}

#define action 'image.flip' flipImage(variable image: 'WFInput', flipImageDirection direction: 'WFImageFlipDirection')

enum maskImageType {
	'Rounded Rectangle',
	'Ellipse',
	'Icon',
}

#define action 'image.mask' maskImage(variable image: 'WFInput', maskImageType type: 'WFMaskType', text ?radius: 'WFMaskCornerRadius')

#define action 'image.mask' customImageMask(variable image: 'WFInput', variable customMaskImage: 'WFCustomMaskImage') {
	"WFMaskType": "Custom Image"
}

#define action 'overlayimageonimage' overlayImage(variable image: 'WFInput', variable overlayImage: 'WFImage') {
	"WFShouldShowImageEditor": true
}

enum customImageOverlayPosition {
	'Center',
	'Top Left',
	'Top Right',
	'Bottom Left',
	'Bottom Right',
	'Custom',
}

#define action 'overlayimageonimage' customImageOverlay(
    variable image: 'WFInput',
    variable overlayImage: 'WFImage',
    text ?width: 'WFImageWidth',
    text ?height: 'WFImageHeight',
    text ?rotation: 'WFRotation' = "0",
    text ?opacity: 'WFOverlayImageOpacity' = "100",
    customImageOverlayPosition ?position: 'WFImagePosition' = "Center",
    text ?customPositionX: 'WFImageX',
    text ?customPositionY: 'WFImageY'
) {
	"WFShouldShowImageEditor": false
}

#define action 'image.resize' resizeImage(variable image: 'WFImage', text width: 'WFImageResizeWidth', text ?height: 'WFImageResizeHeight')

#define action 'image.resize' resizeImageByPercent(variable image: 'WFImage', text percentage: 'WFImageResizePercentage') {
	"WFImageResizeKey": "Percentage"
}

#define action 'image.resize' resizeImageByLongestEdge(variable image: 'WFImage', text length: 'WFImageResizeLength') {
	"WFImageResizeKey": "Longest Edge"
}

#define action 'image.removebackground' removeBackground(variable image: 'WFInput', bool ?crop: 'WFCropToBounds' = false)

#define action 'image.rotate' rotateMedia(variable image: 'WFImage', text degrees: 'WFImageRotateAmount')

enum convertImageFormats {
	'TIFF',
	'GIF',
	'PNG',
	'BMP',
	'PDF',
	'HEIF',
}

#define action 'image.convert' convertImage(variable image: 'WFInput', convertImageFormats format: 'WFImageFormat', float ?quality: 'WFImageCompressionQuality', bool ?preserveMetadata: 'WFImagePreserveMetadata' = true)

#define action 'image.convert' convertToJPEG(variable image: 'WFInput', number ?compressionQuality: 'WFImageCompressionQuality', bool ?preserveMetadata: 'WFImagePreserveMetadata' = true) {
	"WFImageFormat": "JPEG"
}

#define action 'image.convert' stripImageMetadata(variable image: 'WFInput') {
	"WFImageFormat": "Match Input",
	"WFImagePreserveMetadata": false
}

enum imageDetail {
	'Album',
	'Width',
	'Height',
	'Date Taken',
	'Media Type',
	'Photo Type',
	'Is a Screenshot',
	'Is a Screen Recording',
	'Location',
	'Duration',
	'Frame Rate',
	'Orientation',
	'Camera Make',
	'Camera Model',
	'Metadata Dictionary',
	'Is Favorite',
	'File Size',
	'File Extension',
	'Creation Date',
	'File Path',
	'Last Modified Date',
	'Name',
}

#define action 'properties.images' getImageDetail(variable image: 'WFInput', imageDetail detail: 'WFContentItemPropertyName')

enum colorSpace {
	'RGB',
	'Gray',
}

#define action makeImageFromPDFPage(variable pdf: 'WFInput', colorSpace ?colorSpace: 'WFMakeImageFromPDFPageColorspace' = "RGB", text ?pageResolution: 'WFMakeImageFromPDFPageResolution' = "300")

#define action makeImageFromRichText(variable pdf: 'WFInput', text width: 'WFWidth', text height: 'WFHeight')

#define action 'extracttextfromimage' extractImageText(variable image: 'WFImage')

#define action 'detect.images' getImages(variable input: 'WFInput')

/* Music */

#define action getCurrentSong()

#define action 'addtoplaylist' addToMusic(variable songs: 'WFInput')

#define action 'exportsong' selectMusic(bool ?selectMultiple: 'WFExportSongActionSelectMultiple' = false)

enum playMusicShuffles {
	'Off',
	'Songs',
}

enum playMusicRepeats {
	'None',
	'One',
	'All',
}

#define action playMusic(variable music: 'WFMediaItems', playMusicShuffles ?shuffle: 'WFPlayMusicActionShuffle', playMusicRepeats ?repeat: 'WFPlayMusicActionRepeat')

enum musicDetail {
	'Title',
	'Album',
	'Artist',
	'Album Artist',
	'Genre',
	'Composer',
	'Date Added',
	'Media Kind',
	'Duration',
	'Play Count',
	'Track Number',
	'Disc Number',
	'Album Artwork',
	'Is Explicit',
	'Lyrics',
	'Release Date',
	'Comments',
	'Is Cloud Item',
	'Skip Count',
	'Last Played Date',
	'Rating',
	'File Path',
	'Name',
}

#define action 'properties.music' getMusicDetail(variable music: 'WFInput', musicDetail detail: 'WFContentItemPropertyName')

/* Photos */

#define action 'photos.createalbum' createAlbum(text name: 'AlbumName', variable ?images: 'WFInput')

#define action deletePhotos(variable photos)

#define action 'getlatestphotoimport' getLastImport()

#define action getLatestBursts(number count: 'WFGetLatestPhotoCount')

#define action 'getlatestlivephotos' getLatestLivePhotos(number count: 'WFGetLatestPhotoCount')

#define action 'getlastscreenshot' getLatestScreenshots(number count: 'WFGetLatestPhotoCount')

#define action 'getlastphoto' getLatestPhotos(number count: 'WFGetLatestPhotoCount', bool ?includeScreenshots: 'WFGetLatestPhotosActionIncludeScreenshots' = true)

#define action 'getlastvideo' getLatestVideos(number count: 'WFGetLatestPhotoCount')

#define action 'removefromalbum' removeFromAlbum(variable photo: 'WFInput', text album: 'WFRemoveAlbumSelectedGroup')

#define action 'savetocameraroll' savePhoto(variable image: 'WFInput', text ?album: 'WFCameraRollSelectedGroup' = "Recents")

#define action 'selectphoto' selectPhotos(bool ?selectMultiple: 'WFSelectMultiplePhotos' = false)

/* Playback */

#define action 'pausemusic' play() {
	"WFPlayPauseBehavior": "Play"
}

#define action 'pausemusic' pause() {
	"WFPlayPauseBehavior": "Pause"
}

#define action 'pausemusic' togglePlayPause() {
	"WFPlayPauseBehavior": "Play/Pause"
}

#define action skipBack() {
	"WFSkipBackBehavior": "Previous Song"
}

#define action 'skipforward' skipFwd()

#define action 'addmusictoupnext' playNext(variable music: 'WFMusic') {
	"WFWhenToPlay": "Next"
}

#define action 'addmusictoupnext' playLater(variable music: 'WFMusic') {
	"WFWhenToPlay": "Later"
}

#define action clearUpNext()

#define action addToPlaylist(text playlistName: 'WFPlaylistName', variable songs: 'WFInput')

#define action 'get.playlist' getPlaylistSongs(variable playlistName: 'WFPlaylistName')

/* Podcasts */

enum podcastDetail {
	'Feed URL',
	'Genre',
	'Episode Count',
	'Artist',
	'Store ID',
	'Store URL',
	'Artwork',
	'Artwork URL',
	'Name',
}

#define action searchPodcasts(text query: 'WFSearchTerm')

#define action 'properties.podcastshow' getPodcastDetail(variable podcast: 'WFInput', podcastDetail detail: 'WFContentItemPropertyName')

#define action 'getpodcastsfromlibrary' getPodcasts()

#define action playPodcast(variable podcast: 'WFPodcastShow')

/* Video Editing */

#define action 'encodemedia' stripMediaMetadata(variable media: 'WFMedia') {
	"Metadata": true
}

#define action 'encodemedia' setMetadata(
    variable media: 'WFMedia',
    variable ?artwork: 'WFMetadataArtwork',
    text ?title: 'WFMetadataTitle',
    text ?artist: 'WFMetadataArtist',
    text ?album: 'WFMetadataAlbum',
    text ?genre: 'WFMetadataGenre',
    text ?year: 'WFMetadataYear'
) {
	"Metadata": true
}

enum encodeVideoSizes {
	'640×480',
	'960×540',
	'1280×720',
	'1920×1080',
	'3840×2160',
	'HEVC 1920×1080',
	'HEVC 3840x2160',
	'ProRes 422',
}

enum encodeVideoSpeeds {
	'0.5X',
	'Normal',
	'2X',
}

#define action 'encodemedia' encodeVideo(variable video: 'WFMedia', encodeVideoSizes ?size: 'WFMediaSize' = "Passthrough", encodeVideoSpeeds ?speed: 'WFMediaCustomSpeed' = "Normal", bool ?preserveTransparency: 'WFMediaPreserveTransparency' = false)

#define action trimVideo(variable video: 'WFInputMedia')
