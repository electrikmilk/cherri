/*
Document Actions
*/

enum archiveFormat {
    '.zip',
    '.tar.gz',
    '.tar.bz2',
    '.tar.xz',
    '.tar',
    '.gz',
    '.cpio',
    '.iso',
}

// [Doc]: [Archives] Make Archive: Create an archive of `files` named `name` in `format`.
#define action 'makezip' makeArchive(variable files: 'WFInput', archiveFormat ?format: 'WFArchiveFormat' = ".zip", text ?name: 'WFZIPName')

// [Doc]: [Archives] Extract Archive: Extract files from the archive `file`.
#define action 'unzip' extractArchive(variable file: 'WFArchive')

// [Doc]: [Books] Add to Books: Add `input` to books. `input` is expected to be a PDF or epub file.
#define action 'com.apple.iBooksX.openin' addToBooks(variable input: 'BooksInput')

// [Doc]: [Editing]: Markup: Opens document in a markup editor.
#define action 'avairyeditphoto' markup(variable document: 'WFDocument')

// [Doc]: [Files & Folders] Get File Link: Get a link for the provided file.
#define action 'file.getlink' getFileLink(variable file: 'WFFile')

// [Doc]: [Files & Folders] Append File: Append text to a file.
#define action default 'file.append' appendToFile(text filePath: 'WFFilePath', text text: 'WFInput') {
	"WFAppendFileWriteMode": "Append"
}

// [Doc]: [Files & Folders] Prepend File: Prepend text to a file.
#define action 'file.append' prependToFile(text filePath: 'WFFilePath', text text: 'WFInput') {
	"WFAppendFileWriteMode": "Prepend"
}

// [Doc]: [Files & Folders] Create Folder: Create a folder.
#define action 'file.createfolder' createFolder(text path: 'WFFilePath') // TODO: Writing to locations other than the Shortcuts folder.

// [Doc]: [Files & Folders] Delete Files: Delete a file or multiple files.
#define action 'file.delete' deleteFiles(variable input: 'WFInput', bool ?immediately: 'WFDeleteImmediatelyDelete' = false)

// [Doc]: [Files & Folders] Select File: Prompt the user to select one or optionally multiple files.
#define action default 'file.select' selectFile(bool ?selectMultiple: 'SelectMultiple' = false)

// [Doc]: [Files & Folders] Select Folder: Prompt the user to select one or optionally multiple folders.
#define action 'file.select' selectFolder(bool ?selectMultiple: 'SelectMultiple' = false) {
	"WFPickingMode": "Folders"
}

// [Doc]: [Files & Folders] Get File: Get file from a path in the Shortcuts folder.
#define action default 'documentpicker.open' getFile(text path: 'WFGetFilePath', bool ?errorIfNotFound: 'WFFileErrorIfNotFound' = true) // TODO: Writing to locations other than the Shortcuts folder.

// [Doc]: [Files & Folders] Open File: Open a file.
#define action 'openin' openFile(variable file: 'WFInput', bool ?askWhenRun: 'WFOpenInAskWhenRun' = false)

// [Doc]: [Files & Folders] Get Parent Directory: Get the parent directory of the input directory.
#define action getParentDirectory(variable input: 'WFInput')

enum fileDetail {
    'File Size',
    'File Extension',
    'Creation Date',
    'File Path',
    'Last Modified Date',
    'Name'
}

// [Doc]: [Files & Folders] Get File Detail: Get a detail about a file.
#define action 'properties.files' getFileDetail(variable file: 'WFFolder', fileDetail detail: 'WFContentItemPropertyName')

// [Doc]: [Files & Folders] Get Selected
#define action 'finder.getselectedfiles' getSelectedFiles()

// [Doc]: [Files & Folders] Reveal in Finder
#define action 'file.reveal' reveal(variable files: 'WFFile')

// [Doc]: [Files & Folders] Rename File
#define action 'file.rename' rename(variable file: 'WFFile', text newName: 'WFNewFilename')

// [Doc]: [Files & Folders] Save File Prompt: Prompt the user to choose a location to save the file.
#define action default 'documentpicker.save' saveFilePrompt(variable file: 'WFInput', bool ?overwrite: 'WFSaveFileOverwrite' = false)

// [Doc]: [Files & Folders] Save File: Save contents to a file at the specified path.
#define action 'documentpicker.save' saveFile(text path: 'WFFileDestinationPath', variable content: 'WFInput', bool ?overwrite: 'WFSaveFileOverwrite' = false) {
	"WFAskWhereToSave": false
}

enum fileSizeFormat {
    'Closest Unit'
    'Bytes'
    'Kilobytes'
    'Megabytes'
    'Gigabytes'
    'Terabytes'
    'Petabytes'
    'Exabytes'
    'Zettabytes'
    'Yottabytes'
}

// [Doc]: [Files & Folders] File Size: Returns the size of a file.
#define action 'format.filesize' fileSize(variable file: 'WFFileSize', fileSizeFormat format: 'WFFileSizeFormat') {
    "WFFileSizeIncludeUnits": false
}

// [Doc]: [Notes] Open Note: Open note in the Notes app.
#define action 'shownote' openNote(variable note: 'WFInput')

// [Doc]: [Notes] Append Note: Append text to a note.
#define action appendNote(text note: 'WFNote', text input: 'WFInput')

// [Doc]: [Printing] Print: Print input to a printer.
#define action print(variable input: 'WFInput')

enum QRCodeErrorCorrection {
	'Low',
	'Medium',
	'Quartile',
	'High',
}

// [Doc]: [QR Codes] Make QR Code
#define action 'generatebarcode' makeQRCode(text input: 'WFText', QRCodeErrorCorrection ?errorCorrection: 'WFQRErrorCorrectionLevel' = "Medium")

// [Doc]: Convert to USDZ
#define action 'com.apple.HydraUSDAppIntents.ConvertToUSDZ' convertToUSDZ(variable file)
